#!/usr/bin/env python

# updated 2005.07.21, thanks to Jacob Oscarson
# updated 2006.03.30, thanks to Mark Eichin

# http://code.activestate.com/recipes/437932/

import sys
import re
import getopt
from urlparse import urljoin, urlparse

# parse options for module imports
opts, args = getopt.getopt(sys.argv[1:], 'lm:')   # parse log
opts = dict(opts)
if '-m' in opts:
    for imp in opts['-m'].split(','):
        locals()[imp] = __import__(imp.strip())

cmd = ' '.join(args)
if not cmd.strip():
    cmd = 'line'                        # no-op
    
codeobj = compile(cmd, 'command', 'eval')
write = sys.stdout.write

def host(url):
    return urlparse(url).netloc

def seg_access_log(line):
    delimiters = {'[': ']', '"': '"'}
    idx, count, current, delimiter, words = 0, len(line), '', ' ', []
    while idx < count:
        c = line[idx]
        if c == delimiter:
            if current:
                words.append(current)
                current = ''
            delimiter = ' '               # reset
        elif delimiters.get(c):
            delimiter = delimiters.get(c)
        else:
            current += c
        idx += 1
    return words

for numz, line in enumerate(sys.stdin):
    line = line[:-1]
    num = numz + 1
    if '-l' in opts:
        words = seg_access_log(line)
    else:
        words = [w for w in line.strip().split(' ') if len(w)]
    result =  eval(codeobj, globals(), locals())
    if result is None or result is False:
        continue
    elif isinstance(result, list) or isinstance(result, tuple):
        result = ' '.join(map(str, result))
    else:
        result = str(result)
    write(result)
    if not result.endswith('\n'):
        write('\n')
